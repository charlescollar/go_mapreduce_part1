package main

import (
	"fmt"
	"mapreduce"
	"os"
	"unicode"
	"strconv"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part 1B).
	// Make slice (array) to push to
	// Define curword = ""
	// Loop over every character:
	//   If letter:
	//     add letter into curword (maybe lowercase?)
	//   else
	//     hit end of word, thus
	//     if curword != ""
	//       append to our slice, {curword, "1"}
	//       set curword = ""
	var ret []mapreduce.KeyValue
	var curword = ""
	for _, c := range contents {
		if unicode.IsLetter(c) { // Add to our current word
			curword += string(c)
		} else { // Hit whitespace/something not a letter
			if curword != "" { // Check to see we actually have a word to add
				ret = append(ret, mapreduce.KeyValue{curword, "1"})
				curword = ""
			}
		}
	}
	// We may have exited the loop with another word that had not yet been
	// added cause there's no white space after
	if curword != "" { // Check to see we actually have a word to add
		ret = append(ret, mapreduce.KeyValue{curword, "1"})
	}
	return ret
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	return strconv.Itoa(len(values))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
